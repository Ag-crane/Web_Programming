동기 처리 synchronous : 끝날때까지 기다려주는것
비동기 처리 asynchronous : 다른(분리된) 실행 컨텍스트에서 처리를 기다리게 하는것

ex) 유투브
처음 1분 로딩, 영상 재생하는 동안 밑에서 스트리밍(다음부분 받아오는작업)
동기적으로 처리하면 1분본다음에 다음 스트리밍까지 기다려야함
=> 비동기 처리
ex) 인스타 타임라인
새로고침하고싶어서 위에서 아래로 땡길때 (pull to request : PTR)
새로운 타임라인을 다운로드받아야함.
동기 -> 다운로드 받는동안 스토리도못보고 모든 게시글을 못봄
=> 비동기 처리

대부분의 경우는 비동기처리이지만, 동기처리가 필요한 경우도 있음

ex) 이메일 대용량 첨부할 때
업로드 하는 순간부터 - 업로드 중 - 보내기 버튼 활성화돼있음
-> 비동기처리하면 업로드되기전에 메일이 보내져버림. 
=> 동기 처리. 업로드가 끝난 후에 보내야함

기다리면서 뭘 할지를 정의해야함
콜백 : 기다린 다음에 할 행동
자바스크립트 setTimeout ( 함수 , 몇 ms 기다릴지 ) : ~만큼 기다렸다가 ~함수 실행해라
분리된 다른 컨텍스트 발생 -> 몇초만큼 기다렸다가 특정함수 실행
API불러오기 - 불러오는동안 화면이 못움직이면 답답하잖아 웹사이트가 죽은거같잖아 (실제로 오래되면 브라우저도 죽은 웹사이트로 취급)



---------------------------------------------------> UI (메인) 쓰레드 : 모든 동작들 해결 (클릭,호버,액티브한 동작들)
                	ㅣ
실행 컨텍스트 생성   ㄴ--몇초기다려------함수실행---------



--------------------------------------------------> 



비동기 처리

자바스크립트 : 싱글 쓰레드만 쓴다고 가정

task 큐랑 UI 큐에 어떤 순서대로 들어가는지 ... 시험문제

UI큐가 우선순위가 더 높음
UI큐가 비어있을 때 task 큐 처리
UI큐 먼저 다 처리해야하기 때문에 콜백 실행까지 걸리는 시간이 더 걸릴 수 있다. 3ms 기다리라고 설정해도 더 이상 걸릴 수 있음

task큐 는 세가지로 분리돼있음 
- AnimationFrame
- Macro task queue
- Micro task queue 

기본적으로 UI큐가 쓰레드를 선점하고있고,
그 어떤 경우에도 UI 큐가 멈추면 안된다.
Macro큐 작업이 너무 길어져서 화면이 버벅거리는 것처럼 보이는 경우는 있다

setTimeout을 실행하는건 UI큐에서. 그 안의 콜백함수는 macro큐에 등록됨


3초 뒤 백종원찌개로 바꿔라
바꾼 다음 3초 뒤에 백종원을 빨간색으로 바꿔라

방법은 2가지
1. 3초 백종원찌개 -> 3초 빨간색
2. 3초 백종원찌개 + 6초 빨간색 동시에 등록
실제로 화면에 구현했을땐 거의 똑같지만
엄밀히 따지면
1번 방법은 0.5초 밀리면 0.5초 같이 밀리는데
(실행 간격이 항상 3초)
2번 방법은 0.5초 밀려도 6초뒤엔 빨간색됨
(두 콜백함수의 실행 간격이 3초 이내가 될 수 있음)
2번은 만약 너무 많이 밀리면 앞에 3초가 거의 생략된것처럼 보일 수 있음

open API 사용가능여부 확인되면
open API에 서울 데이터 요청
받으면
open API에 중구 데이터 요청
요청 -> 요청확인 -> 받고 결과확인 -> 요청

이걸 2번 방법으로 구현하려고 하면 한계가 있음


let ok = OPEN API 사용 여부
if (ok==false) 
	error!
	return
성공한다 치고~
let seoul = OPEN API 서울 데이터
let data = OPEN API( seoul.중구 )의 미세먼지 데이터 요청
document.getElement~.innerHTML = data

OPEN API 네트워크에 요청하고 데이터를 받아오는 과정은
UI 쓰레드에서 실행할 수 없음
함수 앞에 async 키워드 붙이면
"이 함수는 UI쓰레드(메인쓰레드) 밖에서 실행됩니다 = 무조건 task큐로 넘어가서 비동기적으로 처리" => OPEN API 받아오는 과정 이제 다 할 수 있음
await 키워드 : 성공하든 실패하든 결과가 나올때까지 기다려줌
await 키워드 쓰려면 함수를 async 키워드로 감싸줘야함

async function myfunc(){
	let ok = await OPEN API 사용 여부
	let seoul = await OPEN API 서울 데이터
	let data = await OPEN API( seoul.중구 )의 미세먼지 데이터 요청
	document.getElement~.innerHTML = data
}
<button onclick = "myfunc()">
onclick 함수는 UI쓰레드에서, myfunc 함수는 task 큐에서 실행
비동기적 처리 시 task큐에 작업을 던지기만 하고 그 함수는 끝나고 바로 다음 코드가 실행되므로 주의할 것
